package main

import (
  "fmt"
)

type No struct {
  valor   int
  proximo *No
}

type ListaCircular struct {
  cabeca *No
}

func (lista *ListaCircular) Adicionar(valor int) {
  no := &No{valor: valor}
  if lista.cabeca == nil {
    lista.cabeca = no
    no.proximo = lista.cabeca
  } else {
    atual := lista.cabeca
    for atual.proximo != lista.cabeca {
      atual = atual.proximo
    }
    atual.proximo = no
    no.proximo = lista.cabeca
  }
}

func (lista *ListaCircular) Imprimir() {
  atual := lista.cabeca
  for atual != nil {
    fmt.Println(atual.valor)
    atual = atual.proximo
    if atual == lista.cabeca {
      break
    }
  }
}

func (lista *ListaCircular) Remover(valor int) {
  if lista.cabeca == nil {
    return
  }
  atual := lista.cabeca
  anterior := lista.cabeca

  for atual.valor != valor {
    // Aqui só entra quando eu quero remover o elemento diferente da cabeça
    anterior = atual
    atual = atual.proximo
  }

  if atual == lista.cabeca {
    // Aqui só entra quando eu quero remover o elemento da cabeça
    proximoNo := lista.cabeca.proximo
    for anterior.proximo != lista.cabeca {
      anterior = anterior.proximo
    }
    lista.cabeca = proximoNo
    anterior.proximo = lista.cabeca
  } else {
    anterior.proximo = atual.proximo
  }

}

func main() {
  var numChildren, numPasses int

  // Obter entrada do usuário para o número de crianças e passes
  fmt.Println("Bem-vindo ao jogo da batata quente!")
  fmt.Print("Digite o número de crianças: ")
  fmt.Scanln(&numChildren)
  fmt.Print("Digite o número de passes antes da eliminação: ")
  fmt.Scanln(&numPasses)

  // Criar uma lista circular de crianças
  children := &ListaCircular{}
  for i := 1; i <= numChildren; i++ {
    children.Adicionar(i)
  }

  fmt.Println("Começando o jogo!")

  // Iniciar do primeiro elemento da lista
  currentChild := children.cabeca

  // Loop até que reste apenas uma criança
  for numChildren > 1 {
    // Passar a batata quente um número específico de vezes
    for i := 0; i < numPasses-1; i++ {
      currentChild = currentChild.proximo
    }

    // Eliminar a criança que está segurando a batata quente
    fmt.Println("Eliminando a criança", currentChild.valor)
    children.Remover(currentChild.valor)
    numChildren--

    // Atualizar a criança atual para o próximo na lista
    currentChild = currentChild.proximo
  }

  // A criança restante é a vencedora
  fmt.Println("A criança vencedora é:", children.cabeca.valor)
}
