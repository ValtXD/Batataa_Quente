package main

import "fmt"

type No struct {
valor int
proximo *No
}

type ListaCircular struct {
cabeca *No
}

func (lista *ListaCircular) Adicionar(valor int) {
no := &No{valor: valor}
if lista.cabeca == nil {
lista.cabeca = no
no.proximo = lista.cabeca
} else {
atual := lista.cabeca
for atual.proximo != lista.cabeca {
atual = atual.proximo
}
atual.proximo = no
no.proximo = lista.cabeca
}
}

func (lista *ListaCircular) Imprimir() {
atual := lista.cabeca
for atual != nil {
fmt.Println(atual.valor)
atual = atual.proximo
if atual == lista.cabeca {
break
}
}
}

func (lista *ListaCircular) Remover(valor int) {
if lista.cabeca == nil {
return
}
atual := lista.cabeca
anterior := lista.cabeca

for atual.valor != valor {
// Aqui só entra quando eu quero remover o elemento diferente da cabeça
anterior = atual
atual = atual.proximo
}

if atual == lista.cabeca {
// Aqui só entra quando eu quero remover o elemento da cabeça
proximoNo := lista.cabeca.proximo
for anterior.proximo != lista.cabeca {
anterior = anterior.proximo
}
lista.cabeca = proximoNo
anterior.proximo = lista.cabeca
} else {
anterior.proximo = atual.proximo
}

}
package main

import "fmt"

type No struct {
valor int
proximo *No
}

type ListaCircular struct {
cabeca *No
}

func (lista *ListaCircular) Adicionar(valor int) {
no := &No{valor: valor}
if lista.cabeca == nil {
lista.cabeca = no
no.proximo = lista.cabeca
} else {
atual := lista.cabeca
for atual.proximo != lista.cabeca {
atual = atual.proximo
}
atual.proximo = no
no.proximo = lista.cabeca
}
}

func (lista *ListaCircular) Imprimir() {
atual := lista.cabeca
for atual != nil {
fmt.Println(atual.valor)
atual = atual.proximo
if atual == lista.cabeca {
break
}
}
}

func (lista *ListaCircular) Remover(valor int) {
if lista.cabeca == nil {
return
}
atual := lista.cabeca
anterior := lista.cabeca

for atual.valor != valor {
// Aqui só entra quando eu quero remover o elemento diferente da cabeça
anterior = atual
atual = atual.proximo
}

if atual == lista.cabeca {
// Aqui só entra quando eu quero remover o elemento da cabeça
proximoNo := lista.cabeca.proximo
for anterior.proximo != lista.cabeca {
anterior = anterior.proximo
}
lista.cabeca = proximoNo
anterior.proximo = lista.cabeca
} else {
anterior.proximo = atual.proximo
}

}